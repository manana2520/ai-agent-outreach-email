#!/usr/bin/env python3
"""
Analyze the live email against our quality criteria
"""

import sys
import os
sys.path.append('src')

from sales_personalized_email.email_quality_validator import EmailQualityValidator

def analyze_live_email():
    """Analyze the email that was just generated in the cloud"""
    
    validator = EmailQualityValidator()
    print("üîç ANALYZING LIVE CLOUD AGENT EMAIL")
    print("=" * 60)
    
    # The actual email generated by the cloud agent
    live_email = """Subject: Enhance Your Sustainability Initiatives

Hi Milan,

Milan, your significant contributions at Deloitte demonstrate your commitment to excellence.

We've helped companies like Home Credit achieve a remarkable 70% reduction in FP&A time.

Keboola can enhance your sustainability consulting services and support your clients in addressing their environmental impact efficiently.

Would you be open to a brief 15-minute call to discuss this further?

Best,"""

    # The inputs provided
    inputs = {
        'first_name': 'Milan',
        'last_name': 'Kulhanek',
        'company': 'Deloitte',
        'title': '',
        'selling_intent': 'coffee machine'  # User provided "coffee machine" as intent
    }
    
    # Research data (simulated based on what agent likely found)
    research_data = {
        'linkedin_confidence': 90,  # High confidence based on "High-Impact Project Leader" title found
        'achievements': ['significant contributions at Deloitte'],
        'company_achievements': ['Deloitte excellence']
    }
    
    # Validate the email
    score = validator.validate_email(live_email, research_data, inputs)
    should_regen, reason = validator.should_regenerate(score)
    
    print(f"üìß LIVE EMAIL ANALYSIS:")
    print(f"   Total Score: {score.total_score}/100")
    print(f"   Structure: {score.structure_score}/35")
    print(f"   Personalization: {score.personalization_score}/25")
    print(f"   Message: {score.message_score}/25")
    print(f"   üéØ SELLING INTENT: {score.intent_score}/15")
    print()
    print(f"üîÑ Should Regenerate: {'YES' if should_regen else 'NO'} - {reason}")
    
    # Detailed analysis
    print(f"\nüìä DETAILED BREAKDOWN:")
    
    # Structure Analysis
    structure_details = score.details['structure']['details']
    print(f"   üìã Structure (35 points):")
    print(f"      ‚úÖ First Name: {structure_details.get('first_name', 0)}/5")
    print(f"      ‚úÖ Achievement: {structure_details.get('achievement', 0)}/10") 
    print(f"      ‚úÖ Industry Context: {structure_details.get('industry_context', 0)}/10")
    print(f"      ‚úÖ Value Prop: {structure_details.get('value_proposition', 0)}/8")
    print(f"      ‚úÖ CTA: {structure_details.get('call_to_action', 0)}/5")
    
    # Selling Intent Analysis
    intent_details = score.details['selling_intent']['details']
    print(f"   üéØ Selling Intent (15 points):")
    print(f"      ‚úÖ Keyword Coverage: {intent_details.get('keyword_coverage', 0)}/8")
    print(f"      ‚úÖ Use Case Focus: {intent_details.get('use_case_focus', 0)}/5") 
    print(f"      ‚úÖ Generic Penalty: {intent_details.get('generic_penalty', 0)}")
    
    # Critical Issues Analysis
    print(f"\nüö® CRITICAL ISSUES IDENTIFIED:")
    
    issues = []
    
    # Check for selling intent compliance
    if 'coffee machine' in inputs.get('selling_intent', '').lower():
        if 'coffee' not in live_email.lower():
            issues.append("‚ùå MAJOR: Email completely ignores 'coffee machine' selling intent")
        if 'sustainability' in live_email.lower():
            issues.append("‚ùå MAJOR: Email talks about 'sustainability' instead of coffee machines")
        if 'environmental impact' in live_email.lower():
            issues.append("‚ùå MAJOR: Discusses environmental impact, not coffee machine analytics")
    
    # Check structure issues
    if 'Milan,' in live_email and 'Milan, your' in live_email:
        issues.append("‚ùå MINOR: Redundant greeting - 'Hi Milan,' followed by 'Milan, your...'")
    
    # Check use case relevance
    if 'Home Credit' in live_email and 'FP&A' in live_email:
        issues.append("‚ö†Ô∏è  MEDIUM: Uses generic FP&A use case instead of coffee machine specific case")
        
    if not issues:
        issues.append("‚úÖ No critical issues found")
        
    for issue in issues:
        print(f"      {issue}")
        
    # Overall Assessment
    print(f"\nüìà OVERALL ASSESSMENT:")
    
    if score.total_score >= 85:
        grade = "A"
        status = "‚úÖ ACCEPTABLE"
    elif score.total_score >= 70:
        grade = "B" 
        status = "‚ö†Ô∏è  NEEDS IMPROVEMENT"
    else:
        grade = "F"
        status = "‚ùå UNACCEPTABLE"
        
    print(f"   Grade: {grade} ({score.total_score}/100)")
    print(f"   Status: {status}")
    
    # Recommendations
    print(f"\nüí° RECOMMENDATIONS:")
    if score.intent_score < 10:
        print(f"   1. üéØ CRITICAL: Must focus on coffee machine analytics, not sustainability")
        print(f"   2. üéØ Add specific coffee machine use case (facilities management, consumption analytics)")
        print(f"   3. üéØ Remove sustainability/environmental messaging completely")
    
    if structure_details.get('industry_context', 0) < 8:
        print(f"   4. üìã Find relevant coffee machine or facilities management customer example")
        
    print(f"\nüîß WOULD AUTO-IMPROVEMENT CATCH THIS?")
    print(f"   Score: {score.total_score}/100 ({'Below' if score.total_score < 85 else 'Above'} 85 threshold)")
    print(f"   Intent Score: {score.intent_score}/15 ({'FAILING' if score.intent_score < 10 else 'PASSING'} intent compliance)")
    
    if should_regen:
        print(f"   ‚úÖ AUTO-IMPROVEMENT WOULD REGENERATE THIS EMAIL")
    else:
        print(f"   ‚ùå AUTO-IMPROVEMENT WOULD ACCEPT THIS EMAIL (False positive!)")


if __name__ == "__main__":
    analyze_live_email()